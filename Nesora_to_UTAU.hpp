#define NS_USE_FAST_SIN_TABLE
#include "Nesora_for_embedded_systems.h"
#include "Normalization_to_Nesora.h"


#include <fstream>
#include <iostream>
#include <filesystem>

/*
std::string shiftjis_to_utf8(std::string src){
    mbstate_t mbstate = {0};
    char* src_char = src.data();
    std::wstring wstring_buffer(L"", mbsrtowcs(NULL, &src_char, src.size(), &mbstate));
    size_t wstring_size = mbsrtowcs(wstring_buffer.data(), &src_char, src.size(), &mbstate);

    setlocale(LC_ALL,"ja-JP.SJIS");
    wchar_t* wstr_char = wstring_buffer.data();
    std::string string_buffer("", wcsrtombs(NULL, &wstr_char, wstring_size, &mbstate));
    size_t string_size = wcsrtombs(string_buffer.data(), &wstr_char, src.size(), &mbstate);
    setlocale(LC_ALL,"ja-JP.UTF-8");
    return string_buffer;
}//*/

// PC用のテスト用の関数です。
inline int NesoraToWave(std::string filename, std::vector<int16_t> wave) {
	std::ofstream file(filename, std::ios::out | std::ios::binary);
	if (!file) return 1;

	const int smpl = Nesora::SMPL;

	size_t waveChankSize = 4 + 24 + (wave.size() * sizeof(int16_t) + 8);
	file.write("RIFF", 4);
	file.write((char*)&(waveChankSize), 4);

	// 4byte
	file.write("WAVE", 4);

	// 24 bytes
	int work = 0;
	file.write("fmt ", 4);											//fmt
	file.write((char*)&(work = 16), 4);								//size
	file.write((char*)&(work = 1), 2);								//format(PCM)
	file.write((char*)&(work = 1), 2);								//channel(monaural)
	file.write((char*)&(work = smpl), 4);								//sampling frequency
	file.write((char*)&(work = smpl * sizeof(int16_t)), 4);	//bytes per sec
	file.write((char*)&(work = sizeof(int16_t)), 2);				//block size
	file.write((char*)&(work = sizeof(int16_t) * 8), 2);			//bits per sample

	// wave.mainWave.size() * sizeof(int16_t) + 8 bytes
	file.write("data", 4);
	file.write((char*)&(work = wave.size() * sizeof(int16_t)), 4);	//size
	int16_t* out = new int16_t[wave.size()];
	int16_t* workout = out;
	for (auto workWave : wave)
		*workout++ = workWave;
	file.write((char*)out, static_cast<std::streamsize>(wave.size()) * sizeof(int16_t));

	file.close();

	return 0;
}

std::vector<std::string> voiceList = {
    "あ","い","う","え","お",
    "か","き","く","け","こ",
    "さ","し","す","せ","そ",
    "た","ち","つ","て","と",
    "な","に","ぬ","ね","の",
    "は","ひ","ふ","へ","ほ",
    "ま","み","む","め","も",
    "や",     "ゆ","いぇ","よ",
    "ら","り","る","れ","ろ",
    "わ","ゐ",     "ゑ","を",
    "が","ぎ","ぐ","げ","ご",
    "ざ","じ","ず","ぜ","ぞ",
    "だ","ぢ","づ","で","ど",
    "ば","び","ぶ","べ","ぼ",
    "ぱ","ぴ","ぷ","ぺ","ぽ","ん",
    "きゃ","きゅ","きぇ","きょ","くぁ","くぃ","くぇ","くぉ",
    "しゃ","しゅ","しぇ","しょ","すぁ","すぃ","すぇ","すぉ",
    "ちゃ","ちゅ","ちぇ","ちょ","つぁ","つぃ","つぇ","つぉ",
    "にゃ","にゅ","にぇ","にょ","ぬぁ","ぬぃ","ぬぇ","ぬぉ",
    "ひゃ","ひゅ","ひぇ","ひょ","ふぁ","ふぃ","ふぇ","ふぉ",
    "みゃ","みゅ","みぇ","みょ","むぁ","むぃ","むぇ","むぉ",
    "りゃ","りゅ","りぇ","りょ","るぁ","るぃ","るぇ","るぉ",
    "ぎゃ","ぎゅ","ぎぇ","ぎょ","ぐぁ","ぐぃ","ぐぇ","ぐぉ",
    "じゃ","じゅ","じぇ","じょ","ずぁ","ずぃ","ずぇ","ずぉ",
    "ぢゃ","ぢゅ","ぢぇ","ぢょ","づぁ","づぃ","づぇ","づぉ",
    "びゃ","びゅ","びぇ","びょ","ぶぁ","ぶぃ","ぶぇ","ぶぉ",
    "ぴゃ","ぴゅ","ぴぇ","ぴょ","ぷぁ","ぷぃ","ぷぇ","ぷぉ"
};
std::vector<std::string> voiceList2 = {
    "a","i","u","e","o",
    "ka","ki","ku","ke","ko",
    "sa","si","su","se","so",
    "ta","ti","tu","te","to",
    "na","ni","nu","ne","no",
    "ha","hi","fu","he","ho",
    "ma","mi","mu","me","mo",
    "ya",     "yu","ye","yo",
    "ra","ri","ru","re","ro",
    "wa","wi",     "we","wo",
    "ga","gi","gu","ge","go",
    "za","ji","zu","ze","zo",
    "da","di","du","de","do",
    "ba","bi","bu","be","bo",
    "pa","pi","pu","pe","po","nn",
    "kya","kyu","kye","kyo","kwa","kwi","kwe","kwo",
    "sya","syu","sye","syo","swa","swi","swe","swo",
    "tya","tyu","tye","tyo","twa","twi","twe","two",
    "nya","nyu","nye","nyo","nwa","nwi","nwe","nwo",
    "hya","hyu","hye","hyo","hwa","hwi","hwe","hwo",
    "mya","myu","mye","myo","mwa","mwi","mwe","mwo",
    "rya","ryu","rye","ryo","rwa","rwi","rwe","rwo",
    "gya","gyu","gye","gyo","gwa","gwi","gwe","gwo",
    "zya","zyu","zye","zyo","zwa","zwi","zwe","zwo",
    "dya","dyu","dye","dyo","dwa","dwi","dwe","dwo",
    "bya","byu","bye","byo","bwa","bwi","bwe","bwo",
    "pya","pyu","pye","pyo","pwa","pwi","pwe","pwo"
};
std::vector<std::string> voiceList3 = {
    {(char)0x82, (char)0xa0, 0x00},{(char)0x82, (char)0xa2, 0x00},{(char)0x82, (char)0xa4, 0x00},{(char)0x82, (char)0xa6, 0x00},{(char)0x82, (char)0xa8, 0x00},//a
    {(char)0x82, (char)0xa9, 0x00},{(char)0x82, (char)0xab, 0x00},{(char)0x82, (char)0xad, 0x00},{(char)0x82, (char)0xaf, 0x00},{(char)0x82, (char)0xb1, 0x00},//ka
    {(char)0x82, (char)0xb3, 0x00},{(char)0x82, (char)0xb5, 0x00},{(char)0x82, (char)0xb7, 0x00},{(char)0x82, (char)0xb9, 0x00},{(char)0x82, (char)0xbb, 0x00},//sa
    {(char)0x82, (char)0xbd, 0x00},{(char)0x82, (char)0xbf, 0x00},{(char)0x82, (char)0xc2, 0x00},{(char)0x82, (char)0xc4, 0x00},{(char)0x82, (char)0xc6, 0x00},//ta
    {(char)0x82, (char)0xc8, 0x00},{(char)0x82, (char)0xc9, 0x00},{(char)0x82, (char)0xca, 0x00},{(char)0x82, (char)0xcb, 0x00},{(char)0x82, (char)0xcc, 0x00},//na
    {(char)0x82, (char)0xcd, 0x00},{(char)0x82, (char)0xd0, 0x00},{(char)0x82, (char)0xd3, 0x00},{(char)0x82, (char)0xd6, 0x00},{(char)0x82, (char)0xd9, 0x00},//ha
    {(char)0x82, (char)0xdc, 0x00},{(char)0x82, (char)0xdd, 0x00},{(char)0x82, (char)0xde, 0x00},{(char)0x82, (char)0xdf, 0x00},{(char)0x82, (char)0xe0, 0x00},//ma
    {(char)0x82, (char)0xe2, 0x00},                               {(char)0x82, (char)0xe4, 0x00},{(char)0x82, (char)0xa2, (char)0x82, (char)0xa5, 0x00},{(char)0x82, (char)0xe6, 0x00},//ya
    {(char)0x82, (char)0xe7, 0x00},{(char)0x82, (char)0xe8, 0x00},{(char)0x82, (char)0xe9, 0x00},{(char)0x82, (char)0xea, 0x00},{(char)0x82, (char)0xeb, 0x00},//ra
    {(char)0x82, (char)0xed, 0x00},{(char)0x82, (char)0xee, 0x00},                               {(char)0x82, (char)0xef, 0x00},{(char)0x82, (char)0xf0, 0x00},//wa
    
    {(char)0x82, (char)0xaa, 0x00},{(char)0x82, (char)0xac, 0x00},{(char)0x82, (char)0xae, 0x00},{(char)0x82, (char)0xb0, 0x00},{(char)0x82, (char)0xb2, 0x00},//ga
    {(char)0x82, (char)0xb4, 0x00},{(char)0x82, (char)0xb6, 0x00},{(char)0x82, (char)0xb8, 0x00},{(char)0x82, (char)0xba, 0x00},{(char)0x82, (char)0xbc, 0x00},//za
    {(char)0x82, (char)0xbe, 0x00},{(char)0x82, (char)0xc0, 0x00},{(char)0x82, (char)0xc3, 0x00},{(char)0x82, (char)0xc5, 0x00},{(char)0x82, (char)0xc7, 0x00},//da
    {(char)0x82, (char)0xce, 0x00},{(char)0x82, (char)0xd1, 0x00},{(char)0x82, (char)0xd4, 0x00},{(char)0x82, (char)0xd7, 0x00},{(char)0x82, (char)0xda, 0x00},//ba
    {(char)0x82, (char)0xcf, 0x00},{(char)0x82, (char)0xd2, 0x00},{(char)0x82, (char)0xd5, 0x00},{(char)0x82, (char)0xd8, 0x00},{(char)0x82, (char)0xdb, 0x00},//pa
    {(char)0x82, (char)0xf1, 0x00},//n

    {(char)0x82, (char)0xab, (char)0x82, (char)0xe1, 0x00},{(char)0x82, (char)0xab, (char)0x82, (char)0xe3, 0x00},{(char)0x82, (char)0xab, (char)0x82, (char)0xa5, 0x00},{(char)0x82, (char)0xab, (char)0x82, (char)0xe5, 0x00},//kya
    {(char)0x82, (char)0xad, (char)0x82, (char)0x9f, 0x00},{(char)0x82, (char)0xad, (char)0x82, (char)0xa1, 0x00},{(char)0x82, (char)0xad, (char)0x82, (char)0xa5, 0x00},{(char)0x82, (char)0xad, (char)0x82, (char)0xa7, 0x00},//kwa
    {(char)0x82, (char)0xb5, (char)0x82, (char)0xe1, 0x00},{(char)0x82, (char)0xb5, (char)0x82, (char)0xe3, 0x00},{(char)0x82, (char)0xb5, (char)0x82, (char)0xa5, 0x00},{(char)0x82, (char)0xb5, (char)0x82, (char)0xe5, 0x00},//sha
    {(char)0x82, (char)0xb7, (char)0x82, (char)0x9f, 0x00},{(char)0x82, (char)0xb7, (char)0x82, (char)0xa1, 0x00},{(char)0x82, (char)0xb7, (char)0x82, (char)0xa5, 0x00},{(char)0x82, (char)0xb7, (char)0x82, (char)0xa7, 0x00},//swa
    {(char)0x82, (char)0xbf, (char)0x82, (char)0xe1, 0x00},{(char)0x82, (char)0xbf, (char)0x82, (char)0xe3, 0x00},{(char)0x82, (char)0xbf, (char)0x82, (char)0xa5, 0x00},{(char)0x82, (char)0xbf, (char)0x82, (char)0xe5, 0x00},//cha
    {(char)0x82, (char)0xc2, (char)0x82, (char)0x9f, 0x00},{(char)0x82, (char)0xc2, (char)0x82, (char)0xa1, 0x00},{(char)0x82, (char)0xc2, (char)0x82, (char)0xa5, 0x00},{(char)0x82, (char)0xc2, (char)0x82, (char)0xa7, 0x00},//twa
    {(char)0x82, (char)0xc9, (char)0x82, (char)0xe1, 0x00},{(char)0x82, (char)0xc9, (char)0x82, (char)0xe3, 0x00},{(char)0x82, (char)0xc9, (char)0x82, (char)0xa5, 0x00},{(char)0x82, (char)0xc9, (char)0x82, (char)0xe5, 0x00},//nya
    {(char)0x82, (char)0xca, (char)0x82, (char)0x9f, 0x00},{(char)0x82, (char)0xca, (char)0x82, (char)0xa1, 0x00},{(char)0x82, (char)0xca, (char)0x82, (char)0xa5, 0x00},{(char)0x82, (char)0xca, (char)0x82, (char)0xa7, 0x00},//nwa
    {(char)0x82, (char)0xd0, (char)0x82, (char)0xe1, 0x00},{(char)0x82, (char)0xd0, (char)0x82, (char)0xe3, 0x00},{(char)0x82, (char)0xd0, (char)0x82, (char)0xa5, 0x00},{(char)0x82, (char)0xd0, (char)0x82, (char)0xe5, 0x00},//hya
    {(char)0x82, (char)0xd3, (char)0x82, (char)0x9f, 0x00},{(char)0x82, (char)0xd3, (char)0x82, (char)0xa1, 0x00},{(char)0x82, (char)0xd3, (char)0x82, (char)0xa5, 0x00},{(char)0x82, (char)0xd3, (char)0x82, (char)0xa7, 0x00},//hwa
    {(char)0x82, (char)0xdd, (char)0x82, (char)0xe1, 0x00},{(char)0x82, (char)0xdd, (char)0x82, (char)0xe3, 0x00},{(char)0x82, (char)0xdd, (char)0x82, (char)0xa5, 0x00},{(char)0x82, (char)0xdd, (char)0x82, (char)0xe5, 0x00},//mya
    {(char)0x82, (char)0xde, (char)0x82, (char)0x9f, 0x00},{(char)0x82, (char)0xde, (char)0x82, (char)0xa1, 0x00},{(char)0x82, (char)0xde, (char)0x82, (char)0xa5, 0x00},{(char)0x82, (char)0xde, (char)0x82, (char)0xa7, 0x00},//mwa
    {(char)0x82, (char)0xe8, (char)0x82, (char)0xe1, 0x00},{(char)0x82, (char)0xe8, (char)0x82, (char)0xe3, 0x00},{(char)0x82, (char)0xe8, (char)0x82, (char)0xa5, 0x00},{(char)0x82, (char)0xe8, (char)0x82, (char)0xe5, 0x00},//rya
    {(char)0x82, (char)0xe9, (char)0x82, (char)0x9f, 0x00},{(char)0x82, (char)0xe9, (char)0x82, (char)0xa1, 0x00},{(char)0x82, (char)0xe9, (char)0x82, (char)0xa5, 0x00},{(char)0x82, (char)0xe9, (char)0x82, (char)0xa7, 0x00},//rwa

    {(char)0x82, (char)0xac, (char)0x82, (char)0xe1, 0x00},{(char)0x82, (char)0xac, (char)0x82, (char)0xe3, 0x00},{(char)0x82, (char)0xac, (char)0x82, (char)0xa5, 0x00},{(char)0x82, (char)0xac, (char)0x82, (char)0xe5, 0x00},//gya
    {(char)0x82, (char)0xae, (char)0x82, (char)0x9f, 0x00},{(char)0x82, (char)0xae, (char)0x82, (char)0xa1, 0x00},{(char)0x82, (char)0xae, (char)0x82, (char)0xa5, 0x00},{(char)0x82, (char)0xae, (char)0x82, (char)0xa7, 0x00},//gwa
    {(char)0x82, (char)0xb6, (char)0x82, (char)0xe1, 0x00},{(char)0x82, (char)0xb6, (char)0x82, (char)0xe3, 0x00},{(char)0x82, (char)0xb6, (char)0x82, (char)0xa5, 0x00},{(char)0x82, (char)0xb6, (char)0x82, (char)0xe5, 0x00},//ja
    {(char)0x82, (char)0xb8, (char)0x82, (char)0x9f, 0x00},{(char)0x82, (char)0xb8, (char)0x82, (char)0xa1, 0x00},{(char)0x82, (char)0xb8, (char)0x82, (char)0xa5, 0x00},{(char)0x82, (char)0xb8, (char)0x82, (char)0xa7, 0x00},//zwa
    {(char)0x82, (char)0xc0, (char)0x82, (char)0xe1, 0x00},{(char)0x82, (char)0xc0, (char)0x82, (char)0xe3, 0x00},{(char)0x82, (char)0xc0, (char)0x82, (char)0xa5, 0x00},{(char)0x82, (char)0xc0, (char)0x82, (char)0xe5, 0x00},//dya
    {(char)0x82, (char)0xc3, (char)0x82, (char)0x9f, 0x00},{(char)0x82, (char)0xc3, (char)0x82, (char)0xa1, 0x00},{(char)0x82, (char)0xc3, (char)0x82, (char)0xa5, 0x00},{(char)0x82, (char)0xc3, (char)0x82, (char)0xa7, 0x00},//dwa
    {(char)0x82, (char)0xd1, (char)0x82, (char)0xe1, 0x00},{(char)0x82, (char)0xd1, (char)0x82, (char)0xe3, 0x00},{(char)0x82, (char)0xd1, (char)0x82, (char)0xa5, 0x00},{(char)0x82, (char)0xd1, (char)0x82, (char)0xe5, 0x00},//bya
    {(char)0x82, (char)0xd4, (char)0x82, (char)0x9f, 0x00},{(char)0x82, (char)0xd4, (char)0x82, (char)0xa1, 0x00},{(char)0x82, (char)0xd4, (char)0x82, (char)0xa5, 0x00},{(char)0x82, (char)0xd4, (char)0x82, (char)0xa7, 0x00},//bwa
    {(char)0x82, (char)0xd2, (char)0x82, (char)0xe1, 0x00},{(char)0x82, (char)0xd2, (char)0x82, (char)0xe3, 0x00},{(char)0x82, (char)0xd2, (char)0x82, (char)0xa5, 0x00},{(char)0x82, (char)0xd2, (char)0x82, (char)0xe5, 0x00},//pya
    {(char)0x82, (char)0xd5, (char)0x82, (char)0x9f, 0x00},{(char)0x82, (char)0xd5, (char)0x82, (char)0xa1, 0x00},{(char)0x82, (char)0xd5, (char)0x82, (char)0xa5, 0x00},{(char)0x82, (char)0xd5, (char)0x82, (char)0xa7, 0x00}//pwa
};
std::vector<std::string> voiceList4 = {
    {(char)0x82, (char)0xa0},{(char)0x82, (char)0xa2},{(char)0x82, (char)0xa4},{(char)0x82, (char)0xa6},{(char)0x82, (char)0xa8},//a
    {(char)0x82, (char)0xa9},{(char)0x82, (char)0xab},{(char)0x82, (char)0xad},{(char)0x82, (char)0xaf},{(char)0x82, (char)0xb1},//ka
    {(char)0x82, (char)0xb3},{(char)0x82, (char)0xb5},{(char)0x82, (char)0xb7},{(char)0x82, (char)0xb9},{(char)0x82, (char)0xbb},//sa
    {(char)0x82, (char)0xbd},{(char)0x82, (char)0xbf},{(char)0x82, (char)0xc2},{(char)0x82, (char)0xc4},{(char)0x82, (char)0xc6},//ta
    {(char)0x82, (char)0xc8},{(char)0x82, (char)0xc9},{(char)0x82, (char)0xca},{(char)0x82, (char)0xcb},{(char)0x82, (char)0xcc},//na
    {(char)0x82, (char)0xcd},{(char)0x82, (char)0xd0},{(char)0x82, (char)0xd3},{(char)0x82, (char)0xd6},{(char)0x82, (char)0xd9},//ha
    {(char)0x82, (char)0xdc},{(char)0x82, (char)0xdd},{(char)0x82, (char)0xde},{(char)0x82, (char)0xdf},{(char)0x82, (char)0xe0},//ma
    {(char)0x82, (char)0xe2},                               {(char)0x82, (char)0xe4},{(char)0x82, (char)0xa2, (char)0x82, (char)0xa5},{(char)0x82, (char)0xe6},//ya
    {(char)0x82, (char)0xe7},{(char)0x82, (char)0xe8},{(char)0x82, (char)0xe9},{(char)0x82, (char)0xea},{(char)0x82, (char)0xeb},//ra
    {(char)0x82, (char)0xed},{(char)0x82, (char)0xee},                               {(char)0x82, (char)0xef},{(char)0x82, (char)0xf0},//wa
    
    {(char)0x82, (char)0xaa},{(char)0x82, (char)0xac},{(char)0x82, (char)0xae},{(char)0x82, (char)0xb0},{(char)0x82, (char)0xb2},//ga
    {(char)0x82, (char)0xb4},{(char)0x82, (char)0xb6},{(char)0x82, (char)0xb8},{(char)0x82, (char)0xba},{(char)0x82, (char)0xbc},//za
    {(char)0x82, (char)0xbe},{(char)0x82, (char)0xc0},{(char)0x82, (char)0xc3},{(char)0x82, (char)0xc5},{(char)0x82, (char)0xc7},//da
    {(char)0x82, (char)0xce},{(char)0x82, (char)0xd1},{(char)0x82, (char)0xd4},{(char)0x82, (char)0xd7},{(char)0x82, (char)0xda},//ba
    {(char)0x82, (char)0xcf},{(char)0x82, (char)0xd2},{(char)0x82, (char)0xd5},{(char)0x82, (char)0xd8},{(char)0x82, (char)0xdb},//pa
    {(char)0x82, (char)0xf1},//n

    {(char)0x82, (char)0xab, (char)0x82, (char)0xe1},{(char)0x82, (char)0xab, (char)0x82, (char)0xe3},{(char)0x82, (char)0xab, (char)0x82, (char)0xa5},{(char)0x82, (char)0xab, (char)0x82, (char)0xe5},//kya
    {(char)0x82, (char)0xad, (char)0x82, (char)0x9f},{(char)0x82, (char)0xad, (char)0x82, (char)0xa1},{(char)0x82, (char)0xad, (char)0x82, (char)0xa5},{(char)0x82, (char)0xad, (char)0x82, (char)0xa7},//kwa
    {(char)0x82, (char)0xb5, (char)0x82, (char)0xe1},{(char)0x82, (char)0xb5, (char)0x82, (char)0xe3},{(char)0x82, (char)0xb5, (char)0x82, (char)0xa5},{(char)0x82, (char)0xb5, (char)0x82, (char)0xe5},//sha
    {(char)0x82, (char)0xb7, (char)0x82, (char)0x9f},{(char)0x82, (char)0xb7, (char)0x82, (char)0xa1},{(char)0x82, (char)0xb7, (char)0x82, (char)0xa5},{(char)0x82, (char)0xb7, (char)0x82, (char)0xa7},//swa
    {(char)0x82, (char)0xbf, (char)0x82, (char)0xe1},{(char)0x82, (char)0xbf, (char)0x82, (char)0xe3},{(char)0x82, (char)0xbf, (char)0x82, (char)0xa5},{(char)0x82, (char)0xbf, (char)0x82, (char)0xe5},//cha
    {(char)0x82, (char)0xc2, (char)0x82, (char)0x9f},{(char)0x82, (char)0xc2, (char)0x82, (char)0xa1},{(char)0x82, (char)0xc2, (char)0x82, (char)0xa5},{(char)0x82, (char)0xc2, (char)0x82, (char)0xa7},//twa
    {(char)0x82, (char)0xc9, (char)0x82, (char)0xe1},{(char)0x82, (char)0xc9, (char)0x82, (char)0xe3},{(char)0x82, (char)0xc9, (char)0x82, (char)0xa5},{(char)0x82, (char)0xc9, (char)0x82, (char)0xe5},//nya
    {(char)0x82, (char)0xca, (char)0x82, (char)0x9f},{(char)0x82, (char)0xca, (char)0x82, (char)0xa1},{(char)0x82, (char)0xca, (char)0x82, (char)0xa5},{(char)0x82, (char)0xca, (char)0x82, (char)0xa7},//nwa
    {(char)0x82, (char)0xd0, (char)0x82, (char)0xe1},{(char)0x82, (char)0xd0, (char)0x82, (char)0xe3},{(char)0x82, (char)0xd0, (char)0x82, (char)0xa5},{(char)0x82, (char)0xd0, (char)0x82, (char)0xe5},//hya
    {(char)0x82, (char)0xd3, (char)0x82, (char)0x9f},{(char)0x82, (char)0xd3, (char)0x82, (char)0xa1},{(char)0x82, (char)0xd3, (char)0x82, (char)0xa5},{(char)0x82, (char)0xd3, (char)0x82, (char)0xa7},//hwa
    {(char)0x82, (char)0xdd, (char)0x82, (char)0xe1},{(char)0x82, (char)0xdd, (char)0x82, (char)0xe3},{(char)0x82, (char)0xdd, (char)0x82, (char)0xa5},{(char)0x82, (char)0xdd, (char)0x82, (char)0xe5},//mya
    {(char)0x82, (char)0xde, (char)0x82, (char)0x9f},{(char)0x82, (char)0xde, (char)0x82, (char)0xa1},{(char)0x82, (char)0xde, (char)0x82, (char)0xa5},{(char)0x82, (char)0xde, (char)0x82, (char)0xa7},//mwa
    {(char)0x82, (char)0xe8, (char)0x82, (char)0xe1},{(char)0x82, (char)0xe8, (char)0x82, (char)0xe3},{(char)0x82, (char)0xe8, (char)0x82, (char)0xa5},{(char)0x82, (char)0xe8, (char)0x82, (char)0xe5},//rya
    {(char)0x82, (char)0xe9, (char)0x82, (char)0x9f},{(char)0x82, (char)0xe9, (char)0x82, (char)0xa1},{(char)0x82, (char)0xe9, (char)0x82, (char)0xa5},{(char)0x82, (char)0xe9, (char)0x82, (char)0xa7},//rwa

    {(char)0x82, (char)0xac, (char)0x82, (char)0xe1},{(char)0x82, (char)0xac, (char)0x82, (char)0xe3},{(char)0x82, (char)0xac, (char)0x82, (char)0xa5},{(char)0x82, (char)0xac, (char)0x82, (char)0xe5},//gya
    {(char)0x82, (char)0xae, (char)0x82, (char)0x9f},{(char)0x82, (char)0xae, (char)0x82, (char)0xa1},{(char)0x82, (char)0xae, (char)0x82, (char)0xa5},{(char)0x82, (char)0xae, (char)0x82, (char)0xa7},//gwa
    {(char)0x82, (char)0xb6, (char)0x82, (char)0xe1},{(char)0x82, (char)0xb6, (char)0x82, (char)0xe3},{(char)0x82, (char)0xb6, (char)0x82, (char)0xa5},{(char)0x82, (char)0xb6, (char)0x82, (char)0xe5},//ja
    {(char)0x82, (char)0xb8, (char)0x82, (char)0x9f},{(char)0x82, (char)0xb8, (char)0x82, (char)0xa1},{(char)0x82, (char)0xb8, (char)0x82, (char)0xa5},{(char)0x82, (char)0xb8, (char)0x82, (char)0xa7},//zwa
    {(char)0x82, (char)0xc0, (char)0x82, (char)0xe1},{(char)0x82, (char)0xc0, (char)0x82, (char)0xe3},{(char)0x82, (char)0xc0, (char)0x82, (char)0xa5},{(char)0x82, (char)0xc0, (char)0x82, (char)0xe5},//dya
    {(char)0x82, (char)0xc3, (char)0x82, (char)0x9f},{(char)0x82, (char)0xc3, (char)0x82, (char)0xa1},{(char)0x82, (char)0xc3, (char)0x82, (char)0xa5},{(char)0x82, (char)0xc3, (char)0x82, (char)0xa7},//dwa
    {(char)0x82, (char)0xd1, (char)0x82, (char)0xe1},{(char)0x82, (char)0xd1, (char)0x82, (char)0xe3},{(char)0x82, (char)0xd1, (char)0x82, (char)0xa5},{(char)0x82, (char)0xd1, (char)0x82, (char)0xe5},//bya
    {(char)0x82, (char)0xd4, (char)0x82, (char)0x9f},{(char)0x82, (char)0xd4, (char)0x82, (char)0xa1},{(char)0x82, (char)0xd4, (char)0x82, (char)0xa5},{(char)0x82, (char)0xd4, (char)0x82, (char)0xa7},//bwa
    {(char)0x82, (char)0xd2, (char)0x82, (char)0xe1},{(char)0x82, (char)0xd2, (char)0x82, (char)0xe3},{(char)0x82, (char)0xd2, (char)0x82, (char)0xa5},{(char)0x82, (char)0xd2, (char)0x82, (char)0xe5},//pya
    {(char)0x82, (char)0xd5, (char)0x82, (char)0x9f},{(char)0x82, (char)0xd5, (char)0x82, (char)0xa1},{(char)0x82, (char)0xd5, (char)0x82, (char)0xa5},{(char)0x82, (char)0xd5, (char)0x82, (char)0xa7}//pwa
};

int ToUTAU(Nesora::makeVoiseFromFile MVFF,std::string characterName) {
    std::string string_buffer = "";
    std::cout<<"Nesora voice to UTAU voice"<<std::endl;
    std::filesystem::create_directory(characterName);
    std::string characterDir = characterName + "/";
    for(int i = 0;i < voiceList.size();i++){
        std::cout << voiceList2[i] << "," << (std::string("<s100>")+voiceList2[i]).c_str() << "," << voiceList[i] + ".wav" << std::endl;
        MVFF.textread(("<s100>"+voiceList2[i]).c_str());
        std::vector<nsfloat> wave = MVFF.textreading();
        std::vector<int16_t> wave16;
        for(auto& w:wave){
            wave16.push_back(w * 32767 / 4);
        }
        NesoraToWave(characterDir+voiceList3[i] + ".wav", wave16);
    }

    std::ofstream file(characterDir + "oto.ini", std::ios::out);
    if (!file) return 1;
    for (int i = 0;i < voiceList.size();i++) {
        std::string output = voiceList4[i] + ".wav="+ voiceList4[i];
        file.write(output.c_str(), output.size());
        file.write(",0.0,60.0,25.0,0.0,0.0\n", 23);
    }
    file.close();

    std::ofstream character(characterDir + "character.txt", std::ios::out);
    if (!character)return 1;
    string_buffer = "Charset=UTF-8\n";
    character.write(string_buffer.c_str(), string_buffer.size());
    string_buffer = "name=" + characterName + "\n";
    character.write(string_buffer.c_str(), string_buffer.size());
    string_buffer = "image=" + characterName + ".bmp";
    character.write(string_buffer.c_str(), string_buffer.size());
    character.close();

    std::ofstream readme(characterDir + "readme.txt", std::ios::out);
    if (!readme)return 1;
    readme.write("\n============================================", 45);
    //readme.write("\n音諳零号機二型で生成された、UTAU向けの合成音声です。", 77);
    const char char_bufferz[54] = {(char)0x0a, (char)0x89, (char)0xb9, (char)0xe6, (char)0x7d, (char)0x97, (char)0xeb, (char)0x8d, (char)0x86, (char)0x8b, (char)0x40, (char)0x93, (char)0xf1, (char)0x8c, (char)0x5e, (char)0x82, (char)0xc5, (char)0x90, (char)0xb6, (char)0x90, (char)0xac, (char)0x82, (char)0xb3, (char)0x82, (char)0xea, (char)0x82, (char)0xbd, (char)0x81, (char)0x41, (char)0x55, (char)0x54, (char)0x41, (char)0x55, (char)0x8c, (char)0xfc, (char)0x82, (char)0xaf, (char)0x82, (char)0xcc, (char)0x8d, (char)0x87, (char)0x90, (char)0xac, (char)0x89, (char)0xb9, (char)0x90, (char)0xba, (char)0x82, (char)0xc5, (char)0x82, (char)0xb7, (char)0x81, (char)0x42, (char)0x00};
    readme.write(char_bufferz, 54);
    readme.write("\n============================================", 45);
    readme.close();

    return 0;
}